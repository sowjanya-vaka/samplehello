name: Deploy to EU On - prem ACC
# This workflow will build a MuleSoft project and is manually triggered for deployment.
env:
  applicationName: 'samplehellp'
  muleAppVersion: '1.0.0' # Must match with the version in the jira ticket
  artifactName: 'samplehello-1.0.0-SNAPSHOT-mule-application'  
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build
      run: mvn -B package --file pom.xml
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/.$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    - uses: actions/upload-artifact@master
      with:
          name: artifacts
          path: target/*.jar
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:    
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - uses: actions/download-artifact@master
      with:
        name: artifacts
    - name: Deploy to On prem
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn package deploy -DmuleDeploy 
  release:
    runs-on: ubuntu-latest
    needs: build
    name: Create new github release
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{env.artifactName}}
          
      - name: Extract artifact file name
        id: getfilename
        run: echo "::set-output name=file::$(ls *.jar)"
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.applicationName }}-${{ env.muleAppVersion }}.${{ github.run_number }}
          release_name: ${{ env.applicationName }}-${{ env.muleAppVersion }}.${{ github.run_number }}
          body: |
            Automatic release from ${{ env.artifactName }}-${{ env.muleAppVersion }}.${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./${{ steps.getfilename.outputs.file }}
          asset_name: ${{ steps.getfilename.outputs.file }}
          asset_content_type: application/java-archive

  cleanup:
    runs-on: ubuntu-latest
    needs: release
    name: Clean up unnecessary artifacts
    steps:
      - name: Delete artifact form build
        uses: geekyeggo/delete-artifact@v1
        with:
          name: ${{ env.artifactName }}
