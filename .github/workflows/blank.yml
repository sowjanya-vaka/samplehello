name: Deploy to EU On - prem ACC
# This workflow will build a MuleSoft project and is manually triggered for deployment.
env:
  applicationName: 'samplehellp'
  muleAppVersion: '1.0.0' # Must match with the version in the jira ticket
  artifactName: 'samplehello-1.0.0-SNAPSHOT-mule-application'  
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-mvn-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-mvn-     
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v2.x
        
      - name: Maven Settings
        env:
          MAVEN_SETTINGS_XML: ${{ secrets.MAVEN_MULESOFT_SETTINGS_XML }}
        run:
          echo $MAVEN_SETTINGS_XML | base64 -d > ${{ github.workspace }}/settings.xml

      - name: Update pom.xml Version
        run: mvn versions:set -DnewVersion=${{env.muleAppVersion}}
        
      - name: Build with Maven
        run: 
          mvn -B package -s ${{ github.workspace }}/settings.xml
          
      - uses: actions/upload-artifact@v2
        with:
          name: ${{env.artifactName}}
          path: ${{ github.workspace }}/target/*mule-application*.jar

  release:
    runs-on: ubuntu-latest
    needs: build
    name: Create new github release
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@master
        with:
          name: ${{env.artifactName}}
          
      - name: Extract artifact file name
        id: getfilename
        run: echo "::set-output name=file::$(ls *.jar)"
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.applicationName }}-${{ env.muleAppVersion }}.${{ github.run_number }}
          release_name: ${{ env.applicationName }}-${{ env.muleAppVersion }}.${{ github.run_number }}
          body: |
            Automatic release from ${{ env.artifactName }}-${{ env.muleAppVersion }}.${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./${{ steps.getfilename.outputs.file }}
          asset_name: ${{ steps.getfilename.outputs.file }}
          asset_content_type: application/java-archive

  cleanup:
    runs-on: ubuntu-latest
    needs: release
    name: Clean up unnecessary artifacts
    steps:
      - name: Delete artifact form build
        uses: geekyeggo/delete-artifact@v1
        with:
          name: ${{ env.artifactName }}
